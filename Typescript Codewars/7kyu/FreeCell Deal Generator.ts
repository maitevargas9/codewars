/*
Description

Preamble

In Microsoft FreeCell (shipped with early Windows versions), each deal is generated by PRNG seeded by the deal number 
(see pseudocode below). There are 32000 deals numbered from 1 to 32000. This guarantees every deal is unique, but they 
are portable across computers, so #1 on one machine is exactly the same on other machines.

Your task

Your task is to implement the function which accepts a deal number (1 <= n <= 32000) and returns an array/list/table 
(depending on programming language) of the cards corresponding to the given deal. See the dealing process below.

Initial deck

The initial deck is preloaded in DECK constant or variable (see example solution). It's array/list/table of 52 2-character 
strings (in the table below they are separated by spaces and not enclosed to quotes for readability purpose):
AC AD AH AS 2C 2D 2H 2S 3C 3D 3H 3S 4C
4D 4H 4S 5C 5D 5H 5S 6C 6D 6H 6S 7C 7D
7H 7S 8C 8D 8H 8S 9C 9D 9H 9S TC TD TH
TS JC JD JH JS QC QD QH QS KC KD KH KS

Pseudo random number generator

The algorithm used for shuffling the deck is linear congruential generator from early Microsoft C compiler, in pseudocode:
state = deal_number
loop {
  state = (state * 214013 + 2531011) mod 2^31
  next_value = floor[state / 2^16]
}

Dealing process

Seed PRNG with the deal number.
Take initial deck (see above) and use it for dealing cards. Initial indices are from 0 to 51.
While the deck is not empty, do the following operations:
Generate next random number.
Choose the card index = random number mod remaining deck length.
If it's not the last card of the deck, swap the last card with the card at corresponding index of the deck.
Remove this card from the deck and deal it (put it on the table).
Repeat this procedure until all 52 cards are dealt.
For the simplicity, in this kata the table is represented by one dimentional array/list rather than 8 columns like in real 
FreeCell, in order the cards were placed (first row left to right, second row left to right, and so on).

Dealing process explained

Let's explain how the dealing process works. For example, we will consider the deal number #1.

Create new PRNG and initialize it with state = 1 (for other deals, use its number from the function argument instead of 1).
Make a copy of the initial deck (so the original one can be reused later for more deals).
Repeat the following steps until the deck is empty:
Generate new random number using the current state of PRNG. We modify the state variable and prepare it for the next number: 
state = (1 * 214013 + 2531011) mod 2^31 = 2745024. We divide our state by 2^16 (without modifying the state itself) and get 
integer part of it rounding down, which is 2745024 / 2^16 = 41.
Calculate random number mod remaining deck length and take the corresponding card away from the deck, leaving empty the place 
where it was. In our example, we calculate (41 mod 52) = 41, and 41th card is JD, we deal this card.
The card we extracted from the deck was not the last one in the deck, so we get the last card in the deck and put it to the 
place where our dealt card was. After the first card, our remaining deck will be (we replaced our JD with KS):
AC AD AH AS 2C 2D 2H 2S 3C 3D 3H 3S 4C
4D 4H 4S 5C 5D 5H 5S 6C 6D 6H 6S 7C 7D
7H 7S 8C 8D 8H 8S 9C 9D 9H 9S TC TD TH
TS JC(KS)JH JS QC QD QH QS KC KD KH
Repeat the process, let's deal the second card:
We modify PRNG state again: state = (2745024 * 214013 + 2531011) mod 2^31 = 1210316419
Get the next random number value: 1210316419 / 2^16 = 18467.
Calculate (18467 mod 51) = 5 (becase we have only 51 cards left in the deck, JD was removed before).
Obtain card at index 5 of the deck which is 2D.
Extract it from deck and replace with the last card in our deck:
AC AD AH AS 2C(KH)2H 2S 3C 3D 3H 3S 4C
4D 4H 4S 5C 5D 5H 5S 6C 6D 6H 6S 7C 7D
7H 7S 8C 8D 8H 8S 9C 9D 9H 9S TC TD TH
TS JC KS JH JS QC QD QH QS KC KD
Repeat this process until we deal the entire deck of 52 cards.
Return the resulting cards in order we dealt them.

Example deals

Deal #1:
JD 2D 9H JC 5D 7H 7C 5H
KD KC 9S 5S AD QC KH 3H
2S KS 9D QD JS AS AH 3C
4C 5C TS QH 4H AC 4D 7S
3S TD 4S TH 8H 2C JH 7D
6D 8S 8D QS 6C 3D 8C TC
6S 9C 2H 6H

Deal #11982:
AH AS 4H AC 2D 6S TS JS
3D 3H QS QC 8S 7H AD KS
KD 6H 5S 4D 9H JH 9S 3C
JC 5D 5C 8C 9D TD KH 7C
6C 2C TH QH 6D TC 4S 7S
JD 7D 8H 9C 2H QD 4C 5H
KC 8D 2S 3S

Little help for debugging

If you stuck implementing the right PRNG, here is an example of first 52 numbers generated if the PRNG is seeded with 1:
41, 18467, 6334, 26500, 19169, 15724, 11478, 29358, 26962, 24464, 5705, 28145, 23281, 16827, 9961, 491, 2995, 11942, 4827, 
5436, 32391, 14604, 3902, 153, 292, 12382, 17421, 18716, 19718, 19895, 5447, 21726, 14771, 11538, 1869, 19912, 25667, 26299, 
17035, 9894, 28703, 23811, 31322, 30333, 17673, 4664, 15141, 7711, 28253, 6868, 25547, 27644
*/

import { DECK } from "./preloaded";

export function deal(n: number): string[] {
  let deck = [...DECK];
  let state = n;
  let numberOfCard = 52;
  while (numberOfCard > 1) {
    state = (state * 214013 + 2531011) & 0x7fffffff;
    const newnumber = (state >> 16) % numberOfCard;
    numberOfCard--;
    if (newnumber < numberOfCard)
      [deck[newnumber], deck[numberOfCard]] = [
        deck[numberOfCard],
        deck[newnumber]
      ];
  }
  return deck.reverse();
}
